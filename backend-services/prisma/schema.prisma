generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserInput {
  id                      String                 @id @default(uuid()) @db.Uuid
  resume                  String?                @db.VarChar
  email                   String?                @db.VarChar(255)
  emailStatus             Boolean?
  paymentToken            String?                @db.VarChar(255)
  paymentStatus           Boolean?
  expectedSalary          Int?
  location                String?                @db.VarChar(255)
  createdAt               DateTime?              @db.Timestamp(6)
  prefJobType             String[]               @db.VarChar
  verificationToken       String?
  verificationTokenExpiry DateTime?              @db.Timestamp(6)
  updatedAt               DateTime?              @db.Timestamp(6)
  recommendations         RecommendedJobsTitle[]
  resumeAnalyses          ResumeAnalysis[]

  @@index([id], map: "ix_users_input_id")
  @@map("users_input")
}

model ResumeAnalysis {
  id          String    @id @default(uuid()) @db.Uuid
  userInputId String    @db.Uuid
  resumeScore Float
  analysis    Json?
  createdAt   DateTime? @db.Timestamp(6)
  userInput   UserInput @relation(fields: [userInputId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([id], map: "ix_resume_analysis_id")
  @@map("resume_analysis")
}

model JobScrape {
  id             String          @id @unique @default(uuid()) @db.Uuid
  title          String          @db.VarChar
  logo           String?         @db.VarChar
  companyName    String          @db.VarChar
  salaryMin      Float?
  salaryMax      Float?
  location       String          @db.VarChar
  employmentType String          @db.VarChar
  experience     String?         @db.VarChar
  description    String
  jobTags        String?         @db.VarChar
  scrapeAt       DateTime?       @db.Timestamp(6)
  source_url     String?         @db.VarChar
  embeddings     JobEmbeddings[]

  @@map("job_scrape")
}

model JobEmbeddings {
  id         String    @id @default(uuid()) @db.Uuid
  job_id     String    @db.Uuid
  embedding  Json      @db.Json
  created_at DateTime  @db.Timestamp(6)
  updated_at DateTime  @db.Timestamp(6)
  job        JobScrape @relation(fields: [job_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("job_embeddings")
}

model RecommendedJobsTitle {
  id               String      @id @default(uuid()) @db.Uuid
  userInputId      String?     @db.Uuid
  jobListingId     String?     @db.Uuid
  similarity_score Float?
  jobListing       JobListing? @relation(fields: [jobListingId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userInput        UserInput?  @relation(fields: [userInputId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([id], map: "ix_recommended_jobs_title_id")
  @@map("recommended_jobs_title")
}

model JobListing {
  id              String                 @id @unique @default(uuid()) @db.Uuid
  title           String                 @db.VarChar
  logo            String?                @db.VarChar
  companyName     String                 @db.VarChar
  salaryMin       Float?
  salaryMax       Float?
  location        String                 @db.VarChar
  employmentType  String                 @db.VarChar
  experience      String?                @db.VarChar
  description     String
  jobTags         String?                @db.VarChar
  scrapeAt        DateTime?              @db.Timestamp(6)
  source_url      String?                @db.VarChar
  recommendations RecommendedJobsTitle[]

  @@map("job_listings")
}

model alembic_version {
  version_num String @id(map: "alembic_version_pkc") @db.VarChar(32)
}
