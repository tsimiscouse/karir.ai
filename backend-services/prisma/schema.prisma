generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserInput {
  id                       String            @id @default(uuid())
  email                    String            @db.VarChar(255)
  emailStatus              Boolean
  paymentToken             String?           @db.VarChar(255)
  paymentStatus            Boolean
  resume                   String            @db.VarChar(255)
  expectedSalary           Int
  location                 String            @db.VarChar(255)
  prefJobType              String[]
  verificationToken        String?
  verificationTokenExpiry  DateTime?
  createdAt                DateTime          @default(now())
  updatedAt                DateTime  @updatedAt

  resumeAnalysis           ResumeAnalysis[]
  RecommendedJobsTitle     RecommendedJobsTitle[]

  @@map("users_input")
}

model ResumeAnalysis {
  id            String    @id @default(uuid())
  userInputId   String
  resumeScore   Float
  analysis      Json
  createdAt     DateTime  @default(now())
  userInput     UserInput @relation(fields: [userInputId], references: [id])

  @@map("resume_analysis")
}

model JobTitle {
  id            String            @id @default(uuid())
  title         String            @db.VarChar(255)
  description   String            @db.Text
  tags          String            @db.Text

  @@map("job_titles")
}

model JobListing {
  id              String   @id @default(uuid())
  title           String   @db.VarChar(255)
  logo            String?  @db.VarChar(255)
  companyName     String   @db.VarChar(255)
  salaryMin       Float?
  salaryMax       Float?
  location        String   @db.VarChar(255)
  employmentType  String   @db.VarChar(50)
  experience      String?  @db.Text
  description     String   @db.Text
  jobTags         String?  @db.Text
  scrapeAt        DateTime @default(now())
  source_url      String?  @db.Text

  recommendedJobs RecommendedJobsTitle[]

  @@map("job_listings")
}

model RecommendedJobsTitle {
  id               String   @id @default(uuid())
  userInputId      String   @db.VarChar(255)
  jobListingId     String   @db.VarChar(255)
  similarity_score Float
  createdAt        DateTime @default(now())
  
  userInput        UserInput  @relation(fields: [userInputId], references: [id])
  jobListing       JobListing @relation(fields: [jobListingId], references: [id])

  @@map("recommended_jobs_title")
}

model RecommendedListing {
  id              String    @id @default(uuid())
  recommendedJobId String
  jobListingId    String
  createdAt       DateTime  @default(now())

  @@map("recommended_listing")
}

model JobScrape {
  id              String   @id @default(uuid())
  title           String   @db.VarChar(255)
  logo            String?  @db.VarChar(255)
  companyName     String   @db.VarChar(255)
  salaryMin       Float?
  salaryMax       Float?
  location        String   @db.VarChar(255)
  employmentType  String   @db.VarChar(50)
  experience      String?  @db.Text
  description     String   @db.Text
  jobTags         String?  @db.Text
  scrapeAt        DateTime @default(now())
  source_url      String?  @db.Text

  jobEmbeddings   JobEmbeddings[]

  @@map("job_scrape")
}

model Source {
  id          Int         @id @default(autoincrement())
  sourceName  String      @db.VarChar(255)
  sourceUrl   String      @db.Text

  @@map("source")
}

model JobEmbeddings {
  id         String     @id @default(uuid())
  job_id     String     @db.VarChar(255)
  embedding  Json
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now())
  jobScrape  JobScrape  @relation(fields: [job_id], references: [id], onDelete: Cascade)

  @@map("job_embeddings")
}
